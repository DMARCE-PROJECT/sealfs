.TH SEALFS 5
.SH NAME
sealfs \- SealFS antitamper filesystem for log files
.SH DESCRIPTION
.I SealFS
is an overlay filesystem for antitampering protection of log files. It
is based on a forward integrity model: upon exploitation, the attacker
is not able to fake the logs generated before elevating privileges.
The underlying filesystem keeps a log which annotates any write made
to the upper filesystem. It also extracts secrets from a keystream
file and burns them after. These secrets are used to sign
the log entries. A second copy of the keystream must be kept
safe to be able to check for tampering during forensic analysis.

SealFS only permits the kind of operations which happen to log files. A
file can only be opened append-only. It can be renamed if its inode is
preserved (not copied and deleted).  Some regular filesystem operations
will fail (non append opens), some will not verify after (deleting or
truncating files, altering files), some both.

A filesystem must be verified after it is unmounted, or it may not verify because it has pending
writes (to the keystream or the log).

.SH MOUNT OPTIONS
.TP
.I kpath="path"
Path of the keystream to burn.
.TP
.I nratchet=n
Sets how many secrets are derived from a single key read from the
keystream. Optional, it will be set to a default value if not present. There
are limits to the range of the number. For example, in the current implementation, it
has to fit in a 21 bit unsigned integer. The bits left need to fit in a
signed 64 bit integer together with the offset used to address the log,
so they limit the size of the log to be addressable to 42 bits (64 -
21 - 1 bit of sign).

.SH EXAMPLE
.EX
#in sealfs repository dir running as root
make
(cd tools; make)
mkdir /tmp/xxx /tmp/yyy	#xxx is the backend, yyy is where the logs are generated
sudo insmod sealfs.ko
tools/prep /tmp/xxx/.SEALFS.LOG /tmp/k1 /tmp/k2 100000000
#keep k2 safe
sudo mount -o kpath=/tmp/k1,nratchet=5120 -t sealfs /tmp/xxx /tmp/yyy
#open files in yyy with append and write, rename them
echo 'log entry, I am running' >> /tmp/yyy/v.log
mv /tmp/yyy/v.log /tmp/yyy/v.log.1
#stop creating log entries
sudo umount /tmp/yyy
#forensic analysis, recover k2
tools/verify /tmp/xxx /tmp/k1 /tmp/k2
.EE
.LP
.SH SOURCE
.B sealfs
.SH SEE ALSO
prep(1), verify(1)
.SH BUGS
.I SealFS
has no known bugs.
