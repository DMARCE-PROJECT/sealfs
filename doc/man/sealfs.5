.TH SEALFS 5
.SH NAME
sealfs \- SealFS antitamper filesystem for log files
.SH DESCRIPTION
.I SealFS
is an overlay filesystem for antitampering protection of log files. It is based on a forward integrity model: upon exploitation, the attacker is not able to fake the logs generated before elevating privileges.
The underlying filesystem keeps a
log which annotates any write made to the upper filesystem. It also uses extracts secrets from a
keystream file and burns them after. A second copy of the keystream must be kept safe to
be able to check for tampering in forensic analysis.
SealFS only permits the kind of operations which happen to log files. A file can only be opened
and written for append. It can be renamed if it is the inode is preserved (not copied and deleted).
Some of this operations will fail (non append opens), some will not verify after (deleting files,
altering files), some both.

A filesystem must be verified after it is unmounted, or it may not verify because it has pending
writes (to the keystream or the log).

.SH MOUNT OPTIONS
.TP
.I kpath="path"
Path of the keystream to burn.
.TP
.I nratchet=n
Sets how many secrets are derived from a single key read from the keystream. Optional, will be
set to a default value if not present.

.SH EXAMPLE
.EX
#in sealfs repository dir running as root
make
(cd tools; make)
mkdir /tmp/xxx /tmp/yyy	#xxx is the backend, yyy is where the logs are generated
sudo insmod sealfs.ko
tools/prep /tmp/xxx/.SEALFS.LOG /tmp/k1 /tmp/k2 100000000
sudo mount -o kpath=/tmp/k1,nratchet=17 -t sealfs /tmp/xxx /tmp/yyy
#open files in yyy with append and write, rename them
sudo umount /tmp/yyy
tools/verify /tmp/xxx /tmp/k1 /tmp/k2
.EE
.LP
.SH SOURCE
.B sealfs
.SH SEE ALSO
prep (1), verify (1)
.SH BUGS
.I SealFS
has no known bugs.
